stops <- unique(stops)
# ! commented: finds duplicates although None: ??? - issue with different version of dplyr? - tidyverse is a bloody mess
#if (any(duplicated(stops$stop_id))) {
#  stop("Duplicated Stop IDS")
#}
if (any(duplicated(routes$route_id))) {
message("De-duplicating route_id")
route_id <- routes[, c("file_id", "route_id")]
if (any(duplicated(route_id))) {
if (force) {
routes <- routes[!duplicated(route_id), ]
}
else {
stop("Duplicated route_id within the same GTFS file, try using force = TRUE")
}
}
route_id$route_id_new <- seq(1, nrow(route_id))
routes <- dplyr::left_join(routes, route_id, by = c("file_id",
"route_id"))
routes <- routes[, c("route_id_new", "agency_id", "route_short_name",
"route_long_name", "route_desc", "route_type")]
names(routes) <- c("route_id", "agency_id", "route_short_name",
"route_long_name", "route_desc", "route_type")
}
if (any(duplicated(calendar$service_id))) {
message("De-duplicating service_id")
service_id <- calendar[, c("file_id", "service_id")]
if (any(duplicated(service_id))) {
stop("Duplicated service_id within the same GTFS file")
}
service_id$service_id_new <- seq(1, nrow(service_id))
calendar <- dplyr::left_join(calendar, service_id, by = c("file_id",
"service_id"))
calendar <- calendar[, c("service_id_new", "monday",
"tuesday", "wednesday", "thursday", "friday", "saturday",
"sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday",
"wednesday", "thursday", "friday", "saturday", "sunday",
"start_date", "end_date")
if (nrow(calendar_dates) > 0) {
calendar_dates <- dplyr::left_join(calendar_dates,
service_id, by = c("file_id", "service_id"))
calendar_dates <- calendar_dates[, c("service_id_new",
"date", "exception_type")]
names(calendar_dates) <- c("service_id", "date",
"exception_type")
}
}
if (any(duplicated(trips$trip_id))) {
message("De-duplicating trip_id")
trip_id <- trips[, c("file_id", "trip_id")]
if (any(duplicated(trip_id))) {
stop("Duplicated trip_id within the same GTFS file")
}
trip_id$trip_id_new <- seq(1, nrow(trip_id))
trips <- dplyr::left_join(trips, trip_id, by = c("file_id",
"trip_id"))
trips <- trips[, c("route_id", "service_id", "trip_id_new",
"file_id")]
names(trips) <- c("route_id", "service_id", "trip_id",
"file_id")
stop_times <- dplyr::left_join(stop_times, trip_id, by = c("file_id",
"trip_id"))
stop_times <- stop_times[, c("trip_id_new", "arrival_time",
"departure_time", "stop_id", "stop_sequence", "timepoint")]
names(stop_times) <- c("trip_id", "arrival_time", "departure_time",
"stop_id", "stop_sequence", "timepoint")
}
if (exists("service_id")) {
trips <- dplyr::left_join(trips, service_id, by = c("file_id",
"service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id",
"file_id")]
names(trips) <- c("route_id", "service_id", "trip_id",
"file_id")
}
if (exists("route_id")) {
trips <- dplyr::left_join(trips, route_id, by = c("file_id",
"route_id"))
trips <- trips[, c("route_id_new", "service_id", "trip_id",
"file_id")]
names(trips) <- c("route_id", "service_id", "trip_id",
"file_id")
}
trips <- trips[, c("route_id", "service_id", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
if (nrow(calendar_dates) > 0) {
message("Condensing duplicated service patterns")
calendar_dates_summary <- dplyr::group_by(calendar_dates,
service_id)
if (class(calendar_dates_summary$date) == "Date") {
calendar_dates_summary <- dplyr::summarise(calendar_dates_summary,
pattern = paste(c(as.character(date), exception_type),
collapse = ""))
}
else {
calendar_dates_summary <- dplyr::summarise(calendar_dates_summary,
pattern = paste(c(date, exception_type), collapse = ""))
}
calendar_summary <- dplyr::left_join(calendar, calendar_dates_summary,
by = "service_id")
calendar_summary <- dplyr::group_by(calendar_summary,
start_date, end_date, monday, tuesday, wednesday,
thursday, friday, saturday, sunday, pattern)
calendar_summary$service_id_new <- dplyr::group_indices(calendar_summary)
calendar_summary <- calendar_summary[, c("service_id_new",
"service_id")]
trips <- dplyr::left_join(trips, calendar_summary, by = c("service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
calendar <- dplyr::left_join(calendar, calendar_summary,
by = c("service_id"))
calendar <- calendar[, c("service_id_new", "monday",
"tuesday", "wednesday", "thursday", "friday", "saturday",
"sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday",
"wednesday", "thursday", "friday", "saturday", "sunday",
"start_date", "end_date")
calendar <- calendar[!duplicated(calendar$service_id),
]
calendar_dates <- dplyr::left_join(calendar_dates, calendar_summary,
by = c("service_id"))
calendar_dates <- calendar_dates[, c("service_id_new",
"date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
calendar_dates <- calendar_dates[!duplicated(calendar_dates$service_id),
]
}
stop_times$file_id <- NULL
routes$file_id <- NULL
calendar$file_id <- NULL
res_final <- list(agency, stops, routes, trips, stop_times,
calendar, calendar_dates)
names(res_final) <- c("agency", "stops", "routes", "trips",
"stop_times", "calendar", "calendar_dates")
return(res_final)
}
stopids = list()
for(i in 1:2){#1:length(datalist)){
rawids = paste0(as.character(datalist[[i]][["stops"]][["stop_id"]]),names(datalist)[i])
# previously used ids? None: ???
#show(length(intersect(names(stopids),rawids)))
intids = as.character(sapply(md5(rawids),hex_to_int))
cleandata[[i]][["stops"]][["stop_id"]] <- intids
stopids[rawids] <- intids
# much more stop times: longer -> use hashset
#cleandata[[i]][["stop_times"]][["stop_id"]] <- sapply(md5(as.character(datalist[[i]][["stop_times"]][["stop_id"]])),hex_to_int)
cleandata[[i]][["stop_times"]][["stop_id"]] <- stopids[paste0(as.character(datalist[[i]][["stop_times"]][["stop_id"]]),names(datalist)[i])]
#show(length(cleandata[[i]][["stops"]][["stop_id"]]))
#show(length(unique(cleandata[[i]][["stops"]][["stop_id"]])))
# idem with stop codes
cleandata[[i]][["stops"]][["stop_code"]] <- as.character(sapply(md5(as.character(datalist[[i]][["stops"]][["stop_code"]])),hex_to_int))
}
# Error duplicated agencies Duplicated Agency IDs 1 3 DC 2 7778462 TEL CTG RRS RBUS 4 A2BR ARBB CX EB GLAR HCC MN MT O2 SK SV WCT ATL CAR DGC JOH THC
# -> force = T
res = gtfs_merge_force(cleandata, force=T)
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
res = gtfs_merge_force(cleandata, force=T)
res
merge_all_gtfs<-function(datadir,region_codes = c('EA','EM','L','NE','NW','S','SE','SW','W','WM'),files=paste0(region_codes,'_gtfs.zip')){
datalist = lapply(files,function(f){return(gtfs_read(paste0(datadir,f)))})
names(datalist) <-region_codes
cleandata = datalist
# some cleaning to do: gtfs_merge has bugs
# names(datalist[[1]])
# sapply(datalist[[1]],names)
# Column `stop_id` can't be converted from character to numeric
# datalist[[1]][["stops"]][["stop_id"]] # -> numeric ids !: use hash?
# sapply(md5(datalist[[1]][["stops"]][["stop_id"]]),hex_to_int)
#  + store new ids in a HashSet for stop times
# ! duplicated stop ids -> force does not work: concatenate region code
stopids = list()
for(i in 1:length(datalist)){
rawids = paste0(as.character(datalist[[i]][["stops"]][["stop_id"]]),names(datalist)[i])
# previously used ids? None: ???
#show(length(intersect(names(stopids),rawids)))
intids = as.character(sapply(md5(rawids),hex_to_int))
cleandata[[i]][["stops"]][["stop_id"]] <- intids
stopids[rawids] <- intids
# much more stop times: longer -> use hashset
#cleandata[[i]][["stop_times"]][["stop_id"]] <- sapply(md5(as.character(datalist[[i]][["stop_times"]][["stop_id"]])),hex_to_int)
cleandata[[i]][["stop_times"]][["stop_id"]] <- stopids[paste0(as.character(datalist[[i]][["stop_times"]][["stop_id"]]),names(datalist)[i])]
#show(length(cleandata[[i]][["stops"]][["stop_id"]]))
#show(length(unique(cleandata[[i]][["stops"]][["stop_id"]])))
# idem with stop codes
cleandata[[i]][["stops"]][["stop_code"]] <- as.character(sapply(md5(as.character(datalist[[i]][["stops"]][["stop_code"]])),hex_to_int))
}
# Error duplicated agencies Duplicated Agency IDs 1 3 DC 2 7778462 TEL CTG RRS RBUS 4 A2BR ARBB CX EB GLAR HCC MN MT O2 SK SV WCT ATL CAR DGC JOH THC
# -> force = T
res = gtfs_merge_force(cleandata, force=T)
gtfs_write(res,folder = datadir,name='all_gtfs')
}
targetdir
merge_all_gtfs(targetdir)
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
merge_all_gtfs
merge_all_gtfs(targetdir)
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
stopids = list()
for(i in 1:length(datalist)){
rawids = paste0(as.character(datalist[[i]][["stops"]][["stop_id"]]),names(datalist)[i])
show(length(rawids))
# previously used ids? None: ???
#show(length(intersect(names(stopids),rawids)))
intids = as.character(sapply(md5(rawids),hex_to_int))
cleandata[[i]][["stops"]][["stop_id"]] <- intids
stopids[rawids] <- intids
# much more stop times: longer -> use hashset
#cleandata[[i]][["stop_times"]][["stop_id"]] <- sapply(md5(as.character(datalist[[i]][["stop_times"]][["stop_id"]])),hex_to_int)
cleandata[[i]][["stop_times"]][["stop_id"]] <- stopids[paste0(as.character(datalist[[i]][["stop_times"]][["stop_id"]]),names(datalist)[i])]
#show(length(cleandata[[i]][["stops"]][["stop_id"]]))
#show(length(unique(cleandata[[i]][["stops"]][["stop_id"]])))
# idem with stop codes
cleandata[[i]][["stops"]][["stop_code"]] <- as.character(sapply(md5(as.character(datalist[[i]][["stops"]][["stop_code"]])),hex_to_int))
}
rawids
datalist[[i]][["stops"]][["stop_id"]])
datalist[[i]][["stops"]][["stop_id"]]
datalist[[i]][["stops"]]
nrow(datalist[[i]][["stops"]])
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
stopids = list()
for(i in 1:length(datalist)){
if(nrow(datalist[[i]][["stops"]])>0){
rawids = paste0(as.character(datalist[[i]][["stops"]][["stop_id"]]),names(datalist)[i])
show(length(rawids))
# previously used ids? None: ???
#show(length(intersect(names(stopids),rawids)))
intids = as.character(sapply(md5(rawids),hex_to_int))
cleandata[[i]][["stops"]][["stop_id"]] <- intids
stopids[rawids] <- intids
# much more stop times: longer -> use hashset
#cleandata[[i]][["stop_times"]][["stop_id"]] <- sapply(md5(as.character(datalist[[i]][["stop_times"]][["stop_id"]])),hex_to_int)
cleandata[[i]][["stop_times"]][["stop_id"]] <- stopids[paste0(as.character(datalist[[i]][["stop_times"]][["stop_id"]]),names(datalist)[i])]
#show(length(cleandata[[i]][["stops"]][["stop_id"]]))
#show(length(unique(cleandata[[i]][["stops"]][["stop_id"]])))
# idem with stop codes
cleandata[[i]][["stops"]][["stop_code"]] <- as.character(sapply(md5(as.character(datalist[[i]][["stops"]][["stop_code"]])),hex_to_int))
}
}
res = gtfs_merge_force(cleandata, force=T)
res
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
res
merge_all_gtfs(targetdir)
source('~/ComplexSystems/UrbanDynamics/Models/Matsim/Network/functions.R')
setwd(paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Models/AccessProfiles'))
setwd(paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Models/AccessProfiles'))
library(raster)
library(ggplot2)
library(sf)
library(dplyr)
source('network.R')
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
cities = c("Beijing","Chengdu","Chongqing","Guangzhou","Nanjing","Shanghai","Shenzhen","Wuhan","Xian")
ptlayers = list("Beijing"="beijing","Chengdu"="chengdu","Chongqing"="chongqing","Guangzhou"="guangzhou","Nanjing"="nanjing","Shanghai"="shanghai","Shenzhen"="shenzhen","Wuhan"="wuhan","Xian"="xian")
fuas <- st_read(paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.gpkg'))
# specific selection for guangzhou/shenzhen -> use both name and id
fuaids = list("Beijing"=c(5536),"Chengdu"=c(4034),"Chongqing"=c(2267),"Guangzhou"=c(4413,2151,681),"Nanjing"=c(2419),"Shanghai"=c(5878),"Shenzhen"=c(583,247,1573),"Wuhan"=c(2682),"Xian"=c(2083))
fuanames = list("Beijing"="Beijing","Chengdu"="Chengdu","Chongqing"="Chongqing","Guangzhou"="Guangzhou","Nanjing"="Nanjing","Shanghai"="Shanghai","Shenzhen"="Guangzhou","Wuhan"="Wuhan","Xian"="Xi'an")
#for(city in cities){show(city);show(st_bbox(fuas[fuas$FUA_area%in%fuaids[[city]]&fuas$eFUA_name==fuanames[[city]],]))}
datadir = paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Data/metro/')
resdir=paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Results/AccessProfiles/');dir.create(resdir)
pop90 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW41990_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW41990_GLOBE_R2015A_54009_1k_v1_0.tif'))
pop00 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW42000_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW42000_GLOBE_R2015A_54009_1k_v1_0.tif'))
pop15 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW42015_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW42015_GLOBE_R2015A_54009_1k_v1_0.tif'))
populations = list("1990" = pop90, "2000" = pop00, "2015" = pop15)
getPopPoints <- function(popraster,currentbbox,year){
maxrow = rowFromY(popraster,currentbbox$ymin);minrow = rowFromY(popraster,currentbbox$ymax)
mincol = colFromX(popraster,currentbbox$xmin);maxcol = colFromX(popraster,currentbbox$xmax)
popdf = data.frame(cbind(
x = rep(xFromCol(popraster,mincol:maxcol),maxrow-minrow+1),
y = c(t(matrix(rep(yFromRow(popraster,minrow:maxrow),maxcol-mincol+1),ncol=maxcol-mincol+1,byrow = F))),
pop=getValuesBlock(popraster,row=minrow,nrows=maxrow-minrow+1,col=mincol,ncols=maxcol-mincol+1))
)
popdf$pop[is.na(popdf$pop)]=0
popdf$year=rep(as.numeric(year),nrow(popdf))
poppoints = SpatialPointsDataFrame(popdf[popdf$pop>0,c("x","y")],popdf[popdf$pop>0,])
poppoints$id = as.character(1:length(poppoints))
return(poppoints)
}
#access=c();
#decays=c(); # compute access with fixed decay here -> 60min
#years=c();ccities=c();radius=c()
decay = 60
for(city in cities){
# compute at different network stages -> 1990 (! no nw?) -> 2000 (or min date); 2015; 2030?
#load(paste0(datadir,'processed/',city,'_multiyearGHSL.RData'))
#show(summary(E(fullgraph)$year))
currentextent = fuas[fuas$FUA_area%in%fuaids[[city]]&fuas$eFUA_name==fuanames[[city]],]
currentbbox = st_bbox(currentextent)
xcenter = st_coordinates(st_centroid(currentextent))[1];ycenter=st_coordinates(st_centroid(currentextent))[2]
trgraph=addTransportationLayer(link_layer = paste0(datadir,ptlayers[[city]]),speed=0.0012,snap=500,
e_attr_names=c("year"),reprojection=crs(pop90))
if(city=='Guangzhou'){
# specific case of guangzhou-foshan
trgraph=addTransportationLayer(g=trgraph,link_layer = paste0(datadir,'foshan'),speed=0.0012,snap=500,
e_attr_names=c("year"),reprojection=crs(pop90))
}
fullgraph=trgraph
#for(year in c("1990","2000","2015")){
#
#  popraster = populations[[year]]
#  poppoints = getPopPoints(popraster,currentbbox)
#  # issue with calling addPoints with null empty graph heuristic
#  fullgraph = addAdministrativeLayer(fullgraph,poppoints,connect_speed = 0.006,attributes=list("pop"="pop","id"="id","year"="year"),empty_graph_heuristic="NA")
#}
#save(fullgraph,file=paste0(datadir,'processed/',city,'_multiyearGHSL.RData'))
# year=2030
# data for profile plots
pops=c();accesses=c();dists=c();years=c()
for(year in c(2000,2015,2030)){
currentyear=year
if(year==2000){currentyear=max(c(min(E(fullgraph)$year,na.rm = T),year))}
show(currentyear)
currentgraph = subgraph.edges(fullgraph,which(E(fullgraph)$year<=currentyear),delete.vertices = T)
# need to re-add pop points - full compute was not necessary
popyear = ifelse(currentyear<2015,"2000","2015")
popraster = populations[[popyear]]
poppoints = getPopPoints(popraster,currentbbox,year)
currentgraph = addAdministrativeLayer(currentgraph,poppoints,connect_speed = 0.002,attributes=list("pop"="pop","id"="id","year"="year"),empty_graph_heuristic="NA")
dmat = distances(graph = currentgraph,v=V(currentgraph)[!is.na(V(currentgraph)$id)],to=V(currentgraph)[!is.na(V(currentgraph)$id)],weights = E(currentgraph)$speed*E(currentgraph)$length)
rownames(dmat)<-V(currentgraph)$id[!is.na(V(currentgraph)$id)];colnames(dmat)<-V(currentgraph)$id[!is.na(V(currentgraph)$id)]
access = computeAccess(accessorigdata = data.frame(id=rownames(dmat),var=rep(1,nrow(dmat)),year=rep(currentyear,nrow(dmat))),
#accessdestdata = data.frame(id=rownames(dmat),var=as.numeric(V(currentgraph)$pop[!is.na(V(currentgraph)$pop)]),year=rep(currentyear,nrow(dmat))) ,
accessdestdata = data.frame(id=rownames(dmat),var=rep(1,nrow(dmat)),year=rep(currentyear,nrow(dmat))),
matfun=exp(-dmat/decay)
)
### Access map
xr=xres(popraster);yr=yres(popraster)
sppol = SpatialPolygons(apply(poppoints@data,1,function(r){r = as.numeric(r)
Polygons(list(Polygon(matrix(c(r[1]-xr/2,r[2]+yr/2,r[1]+xr/2,r[2]+yr/2,r[1]+xr/2,r[2]-yr/2,r[1]-xr/2,r[2]-yr/2,r[1]-xr/2,r[2]+yr/2),ncol=2,byrow = T))),ID = as.character(r[5]))
})
,proj4string = crs(popraster))
spdat=poppoints@data;rownames(spdat)<-sapply(sppol@polygons,function(p){p@ID})
spdf=SpatialPolygonsDataFrame(sppol,data = spdat)
nwlayer = spTransform(readOGR(datadir,ptlayers[[city]]),crs(spdf))
# left_join(spdf@data,access,by=c('id'='id'))
trnw=nwlayer[as.numeric(nwlayer$year)<=currentyear,]
# ! there may be some connectivity issues with Guangzhou network (connection GUangzhou - Foshan?)
map(data=access,layer=spdf,spdfid="id",dfid="id",variable="var",
filename=paste0(resdir,'access_',city,'_',year,'.png'),title=paste0(city," (",currentyear,")"),
legendtitle = "Accessibility",extent=spdf,
nclass=8,
width=15,height=15,palette='div',lwd=0.01,
pngResolution = 300,
additionalLinelayers=list(
list(trnw,'blue')
),
withScale=NULL,
legendPosition = "bottomright"
)
######
# profiles
allpoints = left_join(spdf@data,access,by=c('id'='id'))
centerdist= sqrt((allpoints$x - xcenter)^2 + (allpoints$y - ycenter)^2)
distquantiles = c(0,quantile(centerdist,seq(0.05,1.0,0.05)))
for(i in 2:length(distquantiles)){
inds = which(centerdist>distquantiles[i-1]&centerdist<=distquantiles[i]);
pops = append(pops,allpoints$pop[inds]);accesses=append(accesses,allpoints$var[inds]);
dists=append(dists,rep((distquantiles[i]+distquantiles[i-1])/2,length(inds)))
years=append(years,rep(year,length(inds)))
}
}
plotdata=data.frame(population = pops,accessibility = accesses,distance=dists,year=as.character(years))
plotdata=plotdata[plotdata$distance<100000,]
# pop profile
g=ggplot(data = plotdata,aes(x=distance,y=population,group=year,color=year))
#g+geom_point(pch='.')+geom_smooth() # points too broad
ggsave(plot = g+geom_smooth()+stdtheme, filename = paste0(resdir,'popprofile-smooth_',city,'.png'),width=25,height=20,units='cm')
#sdata = as_tibble(data.frame(population = pops,distance=dists,year=as.character(years))) %>% group_by(distance,year) %>% summarise(popsd=sd(population), population = mean(population))
#g=ggplot(data = sdata,aes(x=distance,y=population,group=year,color=year))
##g+geom_point(pch='.')+geom_smooth()
#ggsave(plot = g+geom_point()+geom_errorbar(aes(ymin=population-popsd,ymax=population+popsd))+stdtheme, filename = paste0(resdir,'popprofile-sd_',city,'.png'),width=25,height=20,units='cm')
# access profile
g=ggplot(data = plotdata,aes(x=distance,y=accessibility,group=year,color=year))
ggsave(plot = g+geom_smooth()+ggtitle(city)+stdtheme, filename = paste0(resdir,'accessprofile-smooth_',city,'.png'),width=25,height=20,units='cm')
}
setwd(paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Models/AccessProfiles'))
library(raster)
library(ggplot2)
library(sf)
library(dplyr)
source('network.R')
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
cities = c("Shanghai","Shenzhen","Wuhan","Xian")
ptlayers = list("Beijing"="beijing","Chengdu"="chengdu","Chongqing"="chongqing","Guangzhou"="guangzhou","Nanjing"="nanjing","Shanghai"="shanghai","Shenzhen"="shenzhen","Wuhan"="wuhan","Xian"="xian")
fuas <- st_read(paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0.gpkg'))
# specific selection for guangzhou/shenzhen -> use both name and id
fuaids = list("Beijing"=c(5536),"Chengdu"=c(4034),"Chongqing"=c(2267),"Guangzhou"=c(4413,2151,681),"Nanjing"=c(2419),"Shanghai"=c(5878),"Shenzhen"=c(583,247,1573),"Wuhan"=c(2682),"Xian"=c(2083))
fuanames = list("Beijing"="Beijing","Chengdu"="Chengdu","Chongqing"="Chongqing","Guangzhou"="Guangzhou","Nanjing"="Nanjing","Shanghai"="Shanghai","Shenzhen"="Guangzhou","Wuhan"="Wuhan","Xian"="Xi'an")
#for(city in cities){show(city);show(st_bbox(fuas[fuas$FUA_area%in%fuaids[[city]]&fuas$eFUA_name==fuanames[[city]],]))}
datadir = paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Data/metro/')
resdir=paste0(Sys.getenv('CS_HOME'),'/NetworksTerritories/ChinaAccessibility/Results/AccessProfiles/');dir.create(resdir)
pop90 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW41990_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW41990_GLOBE_R2015A_54009_1k_v1_0.tif'))
pop00 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW42000_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW42000_GLOBE_R2015A_54009_1k_v1_0.tif'))
pop15 = raster(x = paste0(Sys.getenv('CS_HOME'),'/Data/JRC_EC/GHS/GHS_POP_GPW42015_GLOBE_R2015A_54009_1k_v1_0/GHS_POP_GPW42015_GLOBE_R2015A_54009_1k_v1_0.tif'))
populations = list("1990" = pop90, "2000" = pop00, "2015" = pop15)
getPopPoints <- function(popraster,currentbbox,year){
maxrow = rowFromY(popraster,currentbbox$ymin);minrow = rowFromY(popraster,currentbbox$ymax)
mincol = colFromX(popraster,currentbbox$xmin);maxcol = colFromX(popraster,currentbbox$xmax)
popdf = data.frame(cbind(
x = rep(xFromCol(popraster,mincol:maxcol),maxrow-minrow+1),
y = c(t(matrix(rep(yFromRow(popraster,minrow:maxrow),maxcol-mincol+1),ncol=maxcol-mincol+1,byrow = F))),
pop=getValuesBlock(popraster,row=minrow,nrows=maxrow-minrow+1,col=mincol,ncols=maxcol-mincol+1))
)
popdf$pop[is.na(popdf$pop)]=0
popdf$year=rep(as.numeric(year),nrow(popdf))
poppoints = SpatialPointsDataFrame(popdf[popdf$pop>0,c("x","y")],popdf[popdf$pop>0,])
poppoints$id = as.character(1:length(poppoints))
return(poppoints)
}
#access=c();
#decays=c(); # compute access with fixed decay here -> 60min
#years=c();ccities=c();radius=c()
decay = 60
for(city in cities){
# compute at different network stages -> 1990 (! no nw?) -> 2000 (or min date); 2015; 2030?
#load(paste0(datadir,'processed/',city,'_multiyearGHSL.RData'))
#show(summary(E(fullgraph)$year))
currentextent = fuas[fuas$FUA_area%in%fuaids[[city]]&fuas$eFUA_name==fuanames[[city]],]
currentbbox = st_bbox(currentextent)
xcenter = st_coordinates(st_centroid(currentextent))[1];ycenter=st_coordinates(st_centroid(currentextent))[2]
trgraph=addTransportationLayer(link_layer = paste0(datadir,ptlayers[[city]]),speed=0.0012,snap=500,
e_attr_names=c("year"),reprojection=crs(pop90))
if(city=='Guangzhou'){
# specific case of guangzhou-foshan
trgraph=addTransportationLayer(g=trgraph,link_layer = paste0(datadir,'foshan'),speed=0.0012,snap=500,
e_attr_names=c("year"),reprojection=crs(pop90))
}
fullgraph=trgraph
#for(year in c("1990","2000","2015")){
#
#  popraster = populations[[year]]
#  poppoints = getPopPoints(popraster,currentbbox)
#  # issue with calling addPoints with null empty graph heuristic
#  fullgraph = addAdministrativeLayer(fullgraph,poppoints,connect_speed = 0.006,attributes=list("pop"="pop","id"="id","year"="year"),empty_graph_heuristic="NA")
#}
#save(fullgraph,file=paste0(datadir,'processed/',city,'_multiyearGHSL.RData'))
# year=2030
# data for profile plots
pops=c();accesses=c();dists=c();years=c()
for(year in c(2000,2015,2030)){
currentyear=year
if(year==2000){currentyear=max(c(min(E(fullgraph)$year,na.rm = T),year))}
show(currentyear)
currentgraph = subgraph.edges(fullgraph,which(E(fullgraph)$year<=currentyear),delete.vertices = T)
# need to re-add pop points - full compute was not necessary
popyear = ifelse(currentyear<2015,"2000","2015")
popraster = populations[[popyear]]
poppoints = getPopPoints(popraster,currentbbox,year)
currentgraph = addAdministrativeLayer(currentgraph,poppoints,connect_speed = 0.002,attributes=list("pop"="pop","id"="id","year"="year"),empty_graph_heuristic="NA")
dmat = distances(graph = currentgraph,v=V(currentgraph)[!is.na(V(currentgraph)$id)],to=V(currentgraph)[!is.na(V(currentgraph)$id)],weights = E(currentgraph)$speed*E(currentgraph)$length)
rownames(dmat)<-V(currentgraph)$id[!is.na(V(currentgraph)$id)];colnames(dmat)<-V(currentgraph)$id[!is.na(V(currentgraph)$id)]
access = computeAccess(accessorigdata = data.frame(id=rownames(dmat),var=rep(1,nrow(dmat)),year=rep(currentyear,nrow(dmat))),
#accessdestdata = data.frame(id=rownames(dmat),var=as.numeric(V(currentgraph)$pop[!is.na(V(currentgraph)$pop)]),year=rep(currentyear,nrow(dmat))) ,
accessdestdata = data.frame(id=rownames(dmat),var=rep(1,nrow(dmat)),year=rep(currentyear,nrow(dmat))),
matfun=exp(-dmat/decay)
)
### Access map
xr=xres(popraster);yr=yres(popraster)
sppol = SpatialPolygons(apply(poppoints@data,1,function(r){r = as.numeric(r)
Polygons(list(Polygon(matrix(c(r[1]-xr/2,r[2]+yr/2,r[1]+xr/2,r[2]+yr/2,r[1]+xr/2,r[2]-yr/2,r[1]-xr/2,r[2]-yr/2,r[1]-xr/2,r[2]+yr/2),ncol=2,byrow = T))),ID = as.character(r[5]))
})
,proj4string = crs(popraster))
spdat=poppoints@data;rownames(spdat)<-sapply(sppol@polygons,function(p){p@ID})
spdf=SpatialPolygonsDataFrame(sppol,data = spdat)
nwlayer = spTransform(readOGR(datadir,ptlayers[[city]]),crs(spdf))
# left_join(spdf@data,access,by=c('id'='id'))
trnw=nwlayer[as.numeric(nwlayer$year)<=currentyear,]
# ! there may be some connectivity issues with Guangzhou network (connection GUangzhou - Foshan?)
map(data=access,layer=spdf,spdfid="id",dfid="id",variable="var",
filename=paste0(resdir,'access_',city,'_',year,'.png'),title=paste0(city," (",currentyear,")"),
legendtitle = "Accessibility",extent=spdf,
nclass=8,
width=15,height=15,palette='div',lwd=0.01,
pngResolution = 300,
additionalLinelayers=list(
list(trnw,'blue')
),
withScale=NULL,
legendPosition = "bottomright"
)
######
# profiles
allpoints = left_join(spdf@data,access,by=c('id'='id'))
centerdist= sqrt((allpoints$x - xcenter)^2 + (allpoints$y - ycenter)^2)
distquantiles = c(0,quantile(centerdist,seq(0.05,1.0,0.05)))
for(i in 2:length(distquantiles)){
inds = which(centerdist>distquantiles[i-1]&centerdist<=distquantiles[i]);
pops = append(pops,allpoints$pop[inds]);accesses=append(accesses,allpoints$var[inds]);
dists=append(dists,rep((distquantiles[i]+distquantiles[i-1])/2,length(inds)))
years=append(years,rep(year,length(inds)))
}
}
plotdata=data.frame(population = pops,accessibility = accesses,distance=dists,year=as.character(years))
plotdata=plotdata[plotdata$distance<100000,]
# pop profile
g=ggplot(data = plotdata,aes(x=distance,y=population,group=year,color=year))
#g+geom_point(pch='.')+geom_smooth() # points too broad
ggsave(plot = g+geom_smooth()+stdtheme, filename = paste0(resdir,'popprofile-smooth_',city,'.png'),width=25,height=20,units='cm')
#sdata = as_tibble(data.frame(population = pops,distance=dists,year=as.character(years))) %>% group_by(distance,year) %>% summarise(popsd=sd(population), population = mean(population))
#g=ggplot(data = sdata,aes(x=distance,y=population,group=year,color=year))
##g+geom_point(pch='.')+geom_smooth()
#ggsave(plot = g+geom_point()+geom_errorbar(aes(ymin=population-popsd,ymax=population+popsd))+stdtheme, filename = paste0(resdir,'popprofile-sd_',city,'.png'),width=25,height=20,units='cm')
# access profile
g=ggplot(data = plotdata,aes(x=distance,y=accessibility,group=year,color=year))
ggsave(plot = g+geom_smooth()+ggtitle(city)+stdtheme, filename = paste0(resdir,'accessprofile-smooth_',city,'.png'),width=25,height=20,units='cm')
}
warnings()
